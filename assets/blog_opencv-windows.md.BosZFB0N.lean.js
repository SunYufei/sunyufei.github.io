import{_ as i,c as a,a2 as n,o as p}from"./chunks/framework.BCZhKq8w.js";const c=JSON.parse('{"title":"Windows 下 OpenCV 安装踩坑记","description":"","frontmatter":{"lastUpdated":"2019-03-06T00:00:00.000Z"},"headers":[],"relativePath":"blog/opencv-windows.md","filePath":"blog/opencv-windows.md","lastUpdated":1551830400000}'),e={name:"blog/opencv-windows.md"};function t(l,s,h,k,r,o){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="windows-下-opencv-安装踩坑记" tabindex="-1">Windows 下 OpenCV 安装踩坑记 <a class="header-anchor" href="#windows-下-opencv-安装踩坑记" aria-label="Permalink to &quot;Windows 下 OpenCV 安装踩坑记&quot;">​</a></h1><blockquote><p>你已经是一台成熟的电脑了，该学会自己给自己安装开发环境了。</p></blockquote><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>项目需要使用 OpenCV 和它的扩展模块 opencv_contrib，官网上只提供源码、不含扩展模块的 Windows 版本、iOS 和 Android pack，想使用 OpenCV 和它的扩展模块，有如下的几种方法：</p><ol><li>使用 OpenCV Python 接口</li><li>使用 Manjaro Linux / Arch Linux 系统并安装 OpenCV</li><li>下载源码自行编译</li><li>其他方法</li></ol><h2 id="_0x01" tabindex="-1">0x01 <a class="header-anchor" href="#_0x01" aria-label="Permalink to &quot;0x01&quot;">​</a></h2><p>先来说说第一种方法，安装很简单：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opencv-python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opencv-contrib-python</span></span></code></pre></div><p>使用方法参考官方文档即可，前面一直用这个方法，开发很快也很顺利。</p><p><strong>「一号坑已就位」</strong></p><p>OpenCV 基础模块用到现在没发现什么问题，直到我用到了扩展模块中的 face 模块，按照官方文档的要求写好程序，运行时发生了程序卡死的现象。搜了一下在 GitHub 上搜到一个 issue：</p><p><a href="https://github.com/opencv/opencv_contrib/issues/1661" target="_blank" rel="noreferrer">opencv/opencv_contrib#1661 Using Facemark API (Python), Version 4.0.0 - pre : bad alloc error</a></p><p>里面主要说的是一个 C++ 函数的 BUG 导致导出 Python 接口时出现错误。Issue 的下面讲了很多，给人一种 BUG 已经修复的感觉。我去看了一下有 BUG 的那个文件，里面写了一句话：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FIX IT</span></span></code></pre></div><p>也就是说，开发人员临时修了一下 BUG，但没有合并到 OpenCV 代码中。</p><p><strong>“官方 BUG 最为致命”</strong></p><p>此路不通，另寻他路。</p><blockquote><p>2019-08-22 更新：此 BUG 已修复</p></blockquote><h2 id="_0x02" tabindex="-1">0x02 <a class="header-anchor" href="#_0x02" aria-label="Permalink to &quot;0x02&quot;">​</a></h2><p>我想到了以前装 RTTOV 时使用的 Manjaro Linux 系统，去仓库里搜了一下，有 OpenCV 软件包，而且这个软件包包含了扩展模块，可以拿来做开发环境。</p><p>那么问题来了，有些东西必须在 Windows 系统中使用，怎样兼顾呢？</p><p>方法有几种：</p><ol><li>Windows + WSL</li><li>Windows + 虚拟机 + Manjaro</li><li>其他方法</li></ol><p>官方 WSL 不含 Manjaro 或者 Arch Linux 系统，想安装的话可以使用 <a href="https://wiki.archlinux.org/" target="_blank" rel="noreferrer">Arch Wiki</a> 推荐的 <a href="https://github.com/yuk7/ArchWSL" target="_blank" rel="noreferrer">ArchWSL</a> 项目，安装也很简单，跟着文档一步步来就行。</p><p>系统安装完毕后，开始安装软件包：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opencv</span></span></code></pre></div><p>此时可以使用 SSH 连接 WSL 进行开发了。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装OpenSSH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开机启动SSH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd.service</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置SSH可以使用用户名密码登录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/ssh/sshd_config</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 PasswordAuthentication yes 前的 # 去掉</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启SSH服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sshd.service</span></span></code></pre></div><p><strong>「二号坑已就位」</strong></p><p>屏幕上出现一行字：<code>System has not been booted with systemd as init system (PID 1). Can&#39;t operate.</code></p><p>搜了一下，在 GitHub 上找到一个 issue：</p><p><a href="https://github.com/Microsoft/WSL/issues/1579" target="_blank" rel="noreferrer">Microsoft/WSL#1579 WSL does not support systemd / an init system, so you cannot use services. You have to run the commands yourself.</a></p><p><strong>官方：我不支持，嘿嘿嘿</strong></p><p>从别的地方找到了启用 sshd 的方法，开启一个 terminal，使用 nohup 启用 sshd 服务在后台运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/sshd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/output.log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div><p>使用 IDE 链接 WSL，配好编译环境，写好测试代码，一切很顺利的样子。</p><p><strong>「三号坑已就位」</strong></p><p>在我封装好摄像头类进行测试的时候，控制台里多了几行字，系统在问我：“摄像头是啥？”</p><p>WSL 貌似不能使用一些外设。</p><h2 id="_0x03" tabindex="-1">0x03 <a class="header-anchor" href="#_0x03" aria-label="Permalink to &quot;0x03&quot;">​</a></h2><p>虚拟机总能用外设了吧。装个编译程序用的虚拟机，不需要分配太多的资源。安装过程很顺利，摄像头也能够使用。</p><p><strong>「四号坑已就位」</strong></p><p>把虚拟机放后台再开个 IDE，内存占用 90%多。此法可行，但条件不允许啊。</p><h2 id="_0x04" tabindex="-1">0x04 <a class="header-anchor" href="#_0x04" aria-label="Permalink to &quot;0x04&quot;">​</a></h2><p>搜了一下使用 MinGW 编译的 OpenCV，GitHub 上有一个项目，<a href="https://github.com/huihut/OpenCV-MinGW-Build" target="_blank" rel="noreferrer">OpenCV-MinGW-Build</a>，但没有扩展模块。里面有编译方法，我参照它开始了我的编译之路。</p><p>参照教程使用 CMake 生成 Makefile，使用 mingw32-make.exe 进行编译</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mingw32-make.exe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span></span></code></pre></div><p>启用 8 线程，看着那满载的 CPU，感觉这次稳了。</p><p><strong>「五号坑已就位」</strong></p><p>在编译到 <code>videoio</code> 模块时报错，原因是 MinGW 自带的头文件 aviriff.h 注释错误，文件第一行的多行注释少一个 <code>/</code> 符号，修正错误后继续编译，后面报了一些 Warning，没有出现 Error。</p><p>完成后参照<a href="https://stackoverflow.com/questions/51622111/opencv-c-mingw-vscode-fatal-error-to-compile/51801863#51801863" target="_blank" rel="noreferrer">在 VSCode 中使用 OpenCV</a>博客，编写好 Makefile 文档，进行测试。</p><p><strong>「六号坑已就位」</strong></p><p>能编译、能链接但不能运行。原因是缺少依赖库。</p><h2 id="_0x05" tabindex="-1">0x05 <a class="header-anchor" href="#_0x05" aria-label="Permalink to &quot;0x05&quot;">​</a></h2><p>在博客<a href="https://stackoverflow.com/questions/51622111/opencv-c-mingw-vscode-fatal-error-to-compile/51801863#51801863" target="_blank" rel="noreferrer">在 VSCode 中使用 OpenCV</a>的底部有两条评论，提供了两种在 Windows 系统中安装使用 OpenCV 的方法：</p><ol><li>使用 <a href="https://msys2.org/" target="_blank" rel="noreferrer">MSYS2</a> 安装 OpenCV；</li><li>使用 vcpkg (MS packager to install windows based open source projects)安装 OpenCV。</li></ol><p>MSYS2 可以看做 Windows 下的 Arch Linux，与 WSL 不同，MSYS2 里面的包都是编译成 Windows 平台的 exe、dll 等文件，而 WSL 中的包是编译成 elf、so 等文件。</p><h2 id="_0x06-msys2-opencv-环境配置" tabindex="-1">0x06 MSYS2 + OpenCV 环境配置 <a class="header-anchor" href="#_0x06-msys2-opencv-环境配置" aria-label="Permalink to &quot;0x06 MSYS2 + OpenCV 环境配置&quot;">​</a></h2><h3 id="step-1-下载安装" tabindex="-1">Step 1 下载安装 <a class="header-anchor" href="#step-1-下载安装" aria-label="Permalink to &quot;Step 1 下载安装&quot;">​</a></h3><p>到官网下载 MSYS2 安装包，安装完成后配置包镜像。并将目录</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/path/to/MSYS2/mingw64/bin</span></span></code></pre></div><p>添加到环境变量中。</p><h3 id="step-2-安装相关的包" tabindex="-1">Step 2 安装相关的包 <a class="header-anchor" href="#step-2-安装相关的包" aria-label="Permalink to &quot;Step 2 安装相关的包&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果没有安装 toolchain，安装一下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mingw-w64-x86_64-toolchain</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 OpenCV</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mingw-w64-x86_64-opencv</span></span></code></pre></div><h3 id="step-3-配置-vscode-开发环境" tabindex="-1">Step 3 配置 VSCode 开发环境 <a class="header-anchor" href="#step-3-配置-vscode-开发环境" aria-label="Permalink to &quot;Step 3 配置 VSCode 开发环境&quot;">​</a></h3><p>打开 VSCode 的设置文件，添加下列内容：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;C_Cpp.default.compilerPath&quot;: &quot;/path/to/MSYS2/mingw64/bin/gcc.exe&quot;,</span></span>
<span class="line"><span>&quot;C_Cpp.default.cppStandard&quot;: &quot;c++11&quot;,</span></span>
<span class="line"><span>&quot;C_Cpp.default.intelliSenseMode&quot;: &quot;gcc-x64&quot;</span></span></code></pre></div><h3 id="step-4-编写项目-makefile-文件" tabindex="-1">Step 4 编写项目 Makefile 文件 <a class="header-anchor" href="#step-4-编写项目-makefile-文件" aria-label="Permalink to &quot;Step 4 编写项目 Makefile 文件&quot;">​</a></h3><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC = g++</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CFLAGS += -g -Wall -I/path/to/MSYS2/mingw64/include/opencv4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LDFLAGS += -L/path/to/MSYS2/mingw64/lib </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_aruco </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_bgsegm </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_calib3d </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_ccalib </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_core </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_datasets </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_dnn -lopencv_dnn_objdetect </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_dpm </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_face </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_features2d -lopencv_xfeatures2d </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_flann </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_fuzzy </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_gapi </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_hdf </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_hfs </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_highgui </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_img_hash </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_imgcodecs -lopencv_imgproc -lopencv_ximgproc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_line_descriptor </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_ml </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_objdetect -lopencv_xobjdetect </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_optflow </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_ovis </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_phase_unwrapping </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_photo -lopencv_xphoto </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_plot </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_reg </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_rgbd </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_saliency </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_sfm </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_shape </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_stereo </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_stitching </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_structured_light </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_superres </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_surface_matching </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_text </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_tracking </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopencv_video -lopencv_videoio -lopencv_videostab </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lopengl32 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	-lglu32</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TARGET = </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJS += </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obj files</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TARGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TARGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TARGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LDFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:%.o:%.cpp</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CC</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CFLAGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -c </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -o </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.PHONY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:clean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rm -r </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OBJS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TARGET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div><h3 id="step-5-编译运行" tabindex="-1">Step 5 编译运行 <a class="header-anchor" href="#step-5-编译运行" aria-label="Permalink to &quot;Step 5 编译运行&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mingw32-make.exe</span></span></code></pre></div><p>至此，环境配置完毕。</p><h2 id="经验总结" tabindex="-1">经验总结 <a class="header-anchor" href="#经验总结" aria-label="Permalink to &quot;经验总结&quot;">​</a></h2><ol><li>看博客一定要看到最后</li><li>不要形成惯性思维</li></ol><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-label="Permalink to &quot;致谢&quot;">​</a></h2><p><a href="https://msys2.org/" target="_blank" rel="noreferrer">MSYS2</a></p><p><a href="https://github.com/yuk7/ArchWSL" target="_blank" rel="noreferrer">ArchWSL</a></p><p><a href="https://wiki.archlinux.org/" target="_blank" rel="noreferrer">Arch WiKi</a></p><p><a href="https://github.com/huihut/OpenCV-MinGW-Build" target="_blank" rel="noreferrer">OpenCV-MinGW-Build</a>及其开发者<a href="https://blog.huihut.com/" target="_blank" rel="noreferrer">huihut</a></p>`,79)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
